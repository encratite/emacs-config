(defun apply-file-operation (function path)
  (message "Processing file %s" path)
  (switch-to-buffer (find-file-noselect path))
  (funcall function)
  (save-buffer)
  (kill-buffer (current-buffer)))

(defun apply-operation-to-files (function directory source-file-regex)
  (message (format "Processing directory %s" directory))
  (interactive)
  (dolist (entry (directory-files-and-attributes directory))
    (let ((name (car entry)))
      (when (not (member name '("." "..")))
        (let ((path (format "%s/%s" directory name))
              (is-directory (nth 1 entry)))
          (cond (is-directory (apply-operation-to-files function path source-file-regex))
                (t (when (string-match source-file-regex path)
                     (apply-file-operation function path)))))))))

(defun project-indentation (directory source-file-regex)
  (apply-operation-to-files #'fix-formatting directory source-file-regex))

(defun dos-to-unix-line-endings (directory source-file-regex)
  (apply-operation-to-files #'(lambda () (set-buffer-file-coding-system 'undecided-unix)) directory source-file-regex))